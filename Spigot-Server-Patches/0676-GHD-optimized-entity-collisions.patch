From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lukas81298 <lukas81298@gmail.com>
Date: Mon, 11 Jan 2021 21:14:23 +0100
Subject: [PATCH] GHD - optimized entity collisions


diff --git a/src/main/java/com/destroystokyo/paper/util/misc/CachingCallable.java b/src/main/java/com/destroystokyo/paper/util/misc/CachingCallable.java
new file mode 100644
index 0000000000000000000000000000000000000000..77fac6e2955f95bf8c6d1adaff70ef003575a2ae
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/util/misc/CachingCallable.java
@@ -0,0 +1,21 @@
+package com.destroystokyo.paper.util.misc;
+
+import java.util.concurrent.Callable;
+
+/**
+ * @author Lukas Alt
+ * @since 11.01.2021
+ */
+public abstract class CachingCallable<V> implements Callable<V> {
+    private V cachedValue;
+
+    @Override
+    public V call() {
+        if (cachedValue == null) {
+            cachedValue = call0();
+        }
+        return cachedValue;
+    }
+
+    protected abstract V call0();
+}
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/VoxelShapeAccumulator.java b/src/main/java/com/destroystokyo/paper/util/misc/VoxelShapeAccumulator.java
new file mode 100644
index 0000000000000000000000000000000000000000..a2f183a5dedd321d2793fc52791bae1f699c86fd
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/util/misc/VoxelShapeAccumulator.java
@@ -0,0 +1,77 @@
+package com.destroystokyo.paper.util.misc;
+
+import com.google.common.collect.Lists;
+import net.minecraft.server.VoxelShape;
+
+import java.util.Iterator;
+import java.util.List;
+
+/**
+ * + * This class implements an optimized optimized version of the {@link net.minecraft.server.StreamAccumulator} on top of the{@link net.minecraft.server.VoxelShapeSpliterator}. Instead of a Stream, it returns an iterator and implements the iterable interface.
+ * + * It provides
+ * + *
+ * + * @author Lukas Alt
+ * +
+ */
+public class VoxelShapeAccumulator implements Iterable<VoxelShape> {
+    public interface VoxelAdvancer {
+        VoxelShape tryAdvance();
+    }
+
+    private final List<VoxelShape> list = Lists.newArrayList();
+    private final VoxelAdvancer enumerator;
+
+    public VoxelShapeAccumulator(VoxelAdvancer enumerator) {
+        this.enumerator = enumerator;
+    }
+
+    @Override
+    public Iterator<VoxelShape> iterator() {
+        return new Iterator<VoxelShape>() {
+            private int size = 0;
+            private VoxelShape next = null;
+            private boolean saturated = false;
+
+            @Override
+            public boolean hasNext() {
+                if (this.saturated) {
+                    return false;
+                }
+                if (this.size < list.size()) {
+                    return true;
+                }
+                this.next = enumerator.tryAdvance();
+                if (this.next == null) {
+                    this.saturated = true;
+                    return false;
+                }
+                return true;
+            }
+
+            @Override
+            public VoxelShape next() {
+                if (this.size < list.size()) {
+                    return list.get(this.size++);
+                }
+                if (this.saturated) {
+                    throw new IllegalStateException("No more elements");
+                }
+                if (this.next != null) {
+                    final VoxelShape toReturn = this.next;
+                    list.add(next);
+                    this.size++;
+                    this.next = null;
+                    return toReturn;
+                }
+                final VoxelShape next = enumerator.tryAdvance();
+                if (next != null) {
+                    list.add(next);
+                    this.size++;
+                } else {
+                    saturated = true;
+                }
+                return next;
+            }
+        };
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index f49ceaf3084ea00f63c607bc98e2eaf3aa25ff73..b463d6954a6524c6f79450afa2d603b05b8a6f03 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -60,6 +60,7 @@ public class Chunk implements IChunkAccess {
     // Paper start
     public final co.aikar.util.Counter<String> entityCounts = new co.aikar.util.Counter<>();
     public final co.aikar.util.Counter<String> tileEntityCounts = new co.aikar.util.Counter<>();
+
     private class TileEntityHashMap extends java.util.HashMap<BlockPosition, TileEntity> {
         @Override
         public TileEntity put(BlockPosition key, TileEntity value) {
@@ -916,6 +917,49 @@ public class Chunk implements IChunkAccess {
 
     }
 
+    // Paper start
+    public boolean allEntityCollisionShapesEmpty(Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate, int i, int j) {
+        for (int k = i; k <= j; ++k) {
+            List<Entity> list1 = this.entitySlices[k]; // Spigot
+            int l = list1.size();
+
+            for (int i1 = 0; i1 < l; ++i1) {
+                Entity entity1 = list1.get(i1);
+                if (entity1.shouldBeRemoved) continue; // Paper
+
+                if (entity1 != entity && entity1.getBoundingBox().intersects(axisalignedbb)) { // Paper - swap order and use obfuscation helper
+                    if (entity == null && !entity1.canBeCollidedWith()) {
+                        continue;
+                    } else if(entity != null && !entity.canCollideWithEntity(entity1))  {
+                        continue;
+                    }
+                    if (predicate == null || predicate.test(entity1)) {
+                        if(!VoxelShapes.a(entity1.getBoundingBox()).isEmpty()) {
+                            return false;
+                        }
+                    }
+
+                    if (entity1 instanceof EntityEnderDragon) {
+                        EntityComplexPart[] aentitycomplexpart = ((EntityEnderDragon) entity1).eJ();
+                        int j1 = aentitycomplexpart.length;
+
+                        for (int k1 = 0; k1 < j1; ++k1) {
+                            EntityComplexPart entitycomplexpart = aentitycomplexpart[k1];
+
+                            if (entitycomplexpart != entity && entitycomplexpart.getBoundingBox().c(axisalignedbb) && (predicate == null || predicate.test(entitycomplexpart))) {
+                                if(!VoxelShapes.a(entitycomplexpart.getBoundingBox()).isEmpty()) {
+                                    return false;
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        return true;
+    }
+    // Paper end
+
     public <T extends Entity> void a(@Nullable EntityTypes<?> entitytypes, AxisAlignedBB axisalignedbb, List<? super T> list, Predicate<? super T> predicate) {
         org.spigotmc.AsyncCatcher.catchOp("Chunk getEntities call"); // Spigot
         int i = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 0b1d3aac7c3f83a595a87b1cd36bd6e31890c579..05613eeba201907c3dbc8080f07c92b300bb0393 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -652,7 +652,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             }
 
             // CraftBukkit start
-            if (positionChanged && getBukkitEntity() instanceof Vehicle) {
+            if (positionChanged && getBukkitEntity() instanceof Vehicle && VehicleBlockCollisionEvent.getHandlerList().getRegisteredListeners().length > 0) { // Paper - only compute if at least one listener is registered
                 Vehicle vehicle = (Vehicle) this.getBukkitEntity();
                 org.bukkit.block.Block bl = this.world.getWorld().getBlockAt(MathHelper.floor(this.locX()), MathHelper.floor(this.locY()), MathHelper.floor(this.locZ()));
 
@@ -728,7 +728,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 this.setFireTicks(-this.getMaxFireTicks());
             }
 
-            if (this.aG() && this.isBurning()) {
+            if (this.isBurning() && this.isInWaterOrRainOrBubble()) { // Paper - permuted order isBurning() is a lot faster than isInWaterOrRainOrBubble()
                 this.playSound(SoundEffects.ENTITY_GENERIC_EXTINGUISH_FIRE, 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                 this.setFireTicks(-this.getMaxFireTicks());
             }
@@ -818,24 +818,25 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     private Vec3D g(Vec3D vec3d) {
         AxisAlignedBB axisalignedbb = this.getBoundingBox();
         VoxelShapeCollision voxelshapecollision = VoxelShapeCollision.a(this);
-        VoxelShape voxelshape = this.world.getWorldBorder().c();
-        Stream<VoxelShape> stream = !this.world.getWorldBorder().isInBounds(axisalignedbb) ? Stream.empty() : Stream.of(voxelshape); // Paper
-        Stream<VoxelShape> stream1 = this.world.c(this, axisalignedbb.b(vec3d), (entity) -> {
+        //VoxelShape voxelshape = this.world.getWorldBorder().c(); // Paper - inlined
+        Stream<VoxelShape> stream = !this.world.getWorldBorder().isInBounds(axisalignedbb) ? null : Stream.of(this.world.getWorldBorder().asVoxelShape()); // Paper
+        Stream<VoxelShape> stream1 = this.world.getEntityCollisions(this, axisalignedbb.b(vec3d), (entity) -> { // Paper
             return true;
         });
-        StreamAccumulator<VoxelShape> streamaccumulator = new StreamAccumulator<>(Stream.concat(stream1, stream));
-        Vec3D vec3d1 = vec3d.g() == 0.0D ? vec3d : a(this, vec3d, axisalignedbb, this.world, voxelshapecollision, streamaccumulator);
+        StreamAccumulator<VoxelShape> streamaccumulator = new StreamAccumulator<>(stream == null ? stream1 : Stream.concat(stream1, stream)); // Paper
+        Vec3D vec3d1 = vec3d.g() == 0.0D ? vec3d : collideWithVoxels(this, vec3d.x, vec3d.y, vec3d.z, axisalignedbb, this.world, voxelshapecollision, streamaccumulator); // Paper
+        if(this.G <= 0.0F) return vec3d1; // Paper - moved up
         boolean flag = vec3d.x != vec3d1.x;
         boolean flag1 = vec3d.y != vec3d1.y;
         boolean flag2 = vec3d.z != vec3d1.z;
         boolean flag3 = this.onGround || flag1 && vec3d.y < 0.0D;
 
-        if (this.G > 0.0F && flag3 && (flag || flag2)) {
-            Vec3D vec3d2 = a(this, new Vec3D(vec3d.x, (double) this.G, vec3d.z), axisalignedbb, this.world, voxelshapecollision, streamaccumulator);
-            Vec3D vec3d3 = a(this, new Vec3D(0.0D, (double) this.G, 0.0D), axisalignedbb.b(vec3d.x, 0.0D, vec3d.z), this.world, voxelshapecollision, streamaccumulator);
+        if (/*this.G > 0.0F && */ flag3 && (flag || flag2)) { // Paper - moved up
+            Vec3D vec3d2 = collideWithVoxels(this, vec3d.x, (double) this.G, vec3d.z, axisalignedbb, this.world, voxelshapecollision, streamaccumulator); // Paper
+            Vec3D vec3d3 = collideWithVoxels(this, 0.0D, (double) this.G, 0.0D, axisalignedbb.b(vec3d.x, 0.0D, vec3d.z), this.world, voxelshapecollision, streamaccumulator); // Paper
 
             if (vec3d3.y < (double) this.G) {
-                Vec3D vec3d4 = a(this, new Vec3D(vec3d.x, 0.0D, vec3d.z), axisalignedbb.c(vec3d3), this.world, voxelshapecollision, streamaccumulator).e(vec3d3);
+                Vec3D vec3d4 = collideWithVoxels(this, vec3d.x, 0.0D, vec3d.z, axisalignedbb.c(vec3d3), this.world, voxelshapecollision, streamaccumulator).e(vec3d3); // Paper
 
                 if (c(vec3d4) > c(vec3d2)) {
                     vec3d2 = vec3d4;
@@ -843,7 +844,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             }
 
             if (c(vec3d2) > c(vec3d1)) {
-                return vec3d2.e(a(this, new Vec3D(0.0D, -vec3d2.y + vec3d.y, 0.0D), axisalignedbb.c(vec3d2), this.world, voxelshapecollision, streamaccumulator));
+                return vec3d2.e(collideWithVoxels(this, 0.0D, -vec3d2.y + vec3d.y, 0.0D, axisalignedbb.c(vec3d2), this.world, voxelshapecollision, streamaccumulator)); // Paper
             }
         }
 
@@ -854,25 +855,30 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return vec3d.x * vec3d.x + vec3d.z * vec3d.z;
     }
 
-    public static Vec3D a(@Nullable Entity entity, Vec3D vec3d, AxisAlignedBB axisalignedbb, World world, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
-        boolean flag = vec3d.x == 0.0D;
-        boolean flag1 = vec3d.y == 0.0D;
-        boolean flag2 = vec3d.z == 0.0D;
+    // Paper start - do not pass Vec3D object
+    public static Vec3D a(@Nullable Entity entity, Vec3D vec3d, AxisAlignedBB axisalignedbb, World world, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) { return collideWithVoxels(entity, vec3d.x, vec3d.y, vec3d.z, axisalignedbb, world, voxelshapecollision, streamaccumulator); } // Paper - OBFHELPER
+    public static Vec3D collideWithVoxels(@Nullable Entity entity, double vec3d_x, double vec3d_y, double vec3d_z, AxisAlignedBB axisalignedbb, World world, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
+        boolean flag = vec3d_x == 0.0D;
+        boolean flag1 = vec3d_y == 0.0D;
+        boolean flag2 = vec3d_z == 0.0D;
+        // Paper end
 
         if ((!flag || !flag1) && (!flag || !flag2) && (!flag1 || !flag2)) {
-            StreamAccumulator<VoxelShape> streamaccumulator1 = new StreamAccumulator<>(Stream.concat(streamaccumulator.a(), world.b(entity, axisalignedbb.b(vec3d))));
+            StreamAccumulator<VoxelShape> streamaccumulator1 = new StreamAccumulator<>(Stream.concat(streamaccumulator.a(), world.b(entity, axisalignedbb.expand(vec3d_x, vec3d_y, vec3d_z)))); // Paper
 
-            return a(vec3d, axisalignedbb, streamaccumulator1);
+            return collideBoundingBoxLegacy(vec3d_x, vec3d_y, vec3d_z, axisalignedbb, streamaccumulator1); // Paper
         } else {
-            return a(vec3d, axisalignedbb, world, voxelshapecollision, streamaccumulator);
+            return collideBoundingBox(vec3d_x, vec3d_y, vec3d_z, axisalignedbb, world, voxelshapecollision, streamaccumulator); // Paper
         }
     }
 
-    public static Vec3D a(Vec3D vec3d, AxisAlignedBB axisalignedbb, StreamAccumulator<VoxelShape> streamaccumulator) {
-        double d0 = vec3d.x;
-        double d1 = vec3d.y;
-        double d2 = vec3d.z;
-
+    // Paper start - do not pass Vec3D object
+    public static Vec3D a(Vec3D vec3d, AxisAlignedBB axisalignedbb, StreamAccumulator<VoxelShape> streamaccumulator) {return collideBoundingBoxLegacy(vec3d.x, vec3d.y, vec3d.z, axisalignedbb, streamaccumulator); }
+    public static Vec3D collideBoundingBoxLegacy(double vec3d_x, double vec3d_y, double vec3d_z, AxisAlignedBB axisalignedbb, StreamAccumulator<VoxelShape> streamaccumulator) {
+        double d0 = vec3d_x;
+        double d1 = vec3d_y;
+        double d2 = vec3d_z;
+        // Paper end
         if (d1 != 0.0D) {
             d1 = VoxelShapes.a(EnumDirection.EnumAxis.Y, axisalignedbb, streamaccumulator.a(), d1);
             if (d1 != 0.0D) {
@@ -903,11 +909,13 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return new Vec3D(d0, d1, d2);
     }
 
-    public static Vec3D a(Vec3D vec3d, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
-        double d0 = vec3d.x;
-        double d1 = vec3d.y;
-        double d2 = vec3d.z;
-
+    // Paper start - do not pass Vec3D object
+    public static Vec3D a(Vec3D vec3d, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) { return collideBoundingBox(vec3d.x, vec3d.y, vec3d.z, axisalignedbb, iworldreader, voxelshapecollision, streamaccumulator); }
+    public static Vec3D collideBoundingBox(double vec3d_x, double vec3d_y, double vec3d_z, AxisAlignedBB axisalignedbb, IWorldReader iworldreader, VoxelShapeCollision voxelshapecollision, StreamAccumulator<VoxelShape> streamaccumulator) {
+        double d0 = vec3d_x;
+        double d1 = vec3d_y;
+        double d2 = vec3d_z;
+        // Paper end
         if (d1 != 0.0D) {
             d1 = VoxelShapes.a(EnumDirection.EnumAxis.Y, axisalignedbb, iworldreader, d1, voxelshapecollision, streamaccumulator.a());
             if (d1 != 0.0D) {
@@ -1945,9 +1953,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             float f1 = this.size.width * 0.8F;
             AxisAlignedBB axisalignedbb = AxisAlignedBB.g((double) f1, 0.10000000149011612D, (double) f1).d(this.locX(), this.getHeadY(), this.locZ());
 
-            return this.world.b(this, axisalignedbb, (iblockdata, blockposition) -> {
+            // Paper start
+            VoxelShapeSpliterator vss = new VoxelShapeSpliterator(this.world, this, axisalignedbb, (iblockdata, blockposition) -> {
                 return iblockdata.o(this.world, blockposition);
-            }).findAny().isPresent();
+            });
+            return vss.tryAdvance() != null;
+            // Paper end
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ICollisionAccess.java b/src/main/java/net/minecraft/server/ICollisionAccess.java
index 718a846a22a958851e5f984b0e68ceb59fb6dc2a..962371443c85919cc696336d15b6e38e395eb204 100644
--- a/src/main/java/net/minecraft/server/ICollisionAccess.java
+++ b/src/main/java/net/minecraft/server/ICollisionAccess.java
@@ -48,7 +48,18 @@ public interface ICollisionAccess extends IBlockAccess {
 
     default boolean b(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) {
         try { if (entity != null) entity.collisionLoadChunks = true; // Paper
-        return this.d(entity, axisalignedbb, predicate).allMatch(VoxelShape::isEmpty);
+            // Paper start
+            VoxelShapeSpliterator spliterator = new VoxelShapeSpliterator(this, entity, axisalignedbb);
+            VoxelShape shape;
+            while((shape = spliterator.tryAdvance()) != null) {
+                if(!shape.isEmpty()) {
+                    return false;
+                }
+            }
+
+            return this.allEntityCollisionShapesEmpty(entity, axisalignedbb, predicate);
+            //return this.d(entity, axisalignedbb, predicate).allMatch(VoxelShape::isEmpty);
+            // Paper end
         } finally { if (entity != null) entity.collisionLoadChunks = false; } // Paper
     }
 
@@ -56,6 +67,12 @@ public interface ICollisionAccess extends IBlockAccess {
     default Stream<VoxelShape> getEntityCollisions(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) { return c(entity, axisalignedbb, predicate); };
     Stream<VoxelShape> c(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate);
 
+    // Paper start
+    default boolean allEntityCollisionShapesEmpty(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) {
+        return getEntityCollisions(entity, axisalignedbb, predicate).map(s -> VoxelShapes.a(s.getBoundingBox())).allMatch(s -> s.isEmpty());
+    }
+    // Paper end
+
     default Stream<VoxelShape> getCollisions(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) { return d(entity, axisalignedbb, predicate); } // Paper - OBFHELPER
     default Stream<VoxelShape> d(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) {
         return Stream.concat(this.b(entity, axisalignedbb), this.c(entity, axisalignedbb, predicate));
diff --git a/src/main/java/net/minecraft/server/VoxelShapeSpliterator.java b/src/main/java/net/minecraft/server/VoxelShapeSpliterator.java
index e841611bb7c36dffec44bb9e74a0a9657a113263..225810c8d3ea7c7aa77ee8143fbad95250fd20ab 100644
--- a/src/main/java/net/minecraft/server/VoxelShapeSpliterator.java
+++ b/src/main/java/net/minecraft/server/VoxelShapeSpliterator.java
@@ -1,12 +1,14 @@
 package net.minecraft.server;
 
+import com.destroystokyo.paper.util.misc.VoxelShapeAccumulator;
+
 import java.util.Objects;
 import java.util.Spliterators.AbstractSpliterator;
 import java.util.function.BiPredicate;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
 
-public class VoxelShapeSpliterator extends AbstractSpliterator<VoxelShape> {
+public class VoxelShapeSpliterator extends AbstractSpliterator<VoxelShape> implements VoxelShapeAccumulator.VoxelAdvancer { // Paper - implement VoxelAdvancer
 
     @Nullable
     private final Entity a; final Entity getEntity() { return this.a; } // Paper - OBFHELPER
@@ -16,7 +18,7 @@ public class VoxelShapeSpliterator extends AbstractSpliterator<VoxelShape> {
     private final BlockPosition.MutableBlockPosition e; final BlockPosition.MutableBlockPosition getMutablePos() { return this.e; } // Paper - OBFHELPER
     private final VoxelShape f;
     private final ICollisionAccess g; final ICollisionAccess getCollisionAccess() { return this.g; } // Paper - OBFHELPER
-    private boolean h;
+    private boolean h; public boolean shouldCheckWorldBorder() { return this.h; } // Paper - OBFHELPER
     private final BiPredicate<IBlockData, BlockPosition> i;
 
     public VoxelShapeSpliterator(ICollisionAccess icollisionaccess, @Nullable Entity entity, AxisAlignedBB axisalignedbb) {
@@ -49,7 +51,19 @@ public class VoxelShapeSpliterator extends AbstractSpliterator<VoxelShape> {
         return this.h && this.b(consumer) || this.a(consumer);
     }
 
-    boolean a(Consumer<? super VoxelShape> consumer) {
+    // Paper start
+    @Override
+    public VoxelShape tryAdvance() {
+        if(this.shouldCheckWorldBorder()) {
+            VoxelShape wbShape = this.getWorldBorderShape();
+            if(wbShape != null) {
+                return wbShape;
+            }
+        }
+        return this.getNextShape();
+    }
+
+    private VoxelShape getNextShape() {
         while (true) {
             if (this.d.a()) {
                 int i = this.d.b(); final int x = i;
@@ -76,8 +90,7 @@ public class VoxelShapeSpliterator extends AbstractSpliterator<VoxelShape> {
                 if (iblockdata == null) {
                     if (!(entity instanceof EntityPlayer) || entity.world.paperConfig.preventMovingIntoUnloadedChunks) {
                         VoxelShape voxelshape3 = VoxelShapes.of(far ? entity.getBoundingBox() : new AxisAlignedBB(new BlockPosition(x, y, z)));
-                        consumer.accept(voxelshape3);
-                        return true;
+                        return voxelshape3;
                     }
                     continue;
                 }
@@ -95,8 +108,7 @@ public class VoxelShapeSpliterator extends AbstractSpliterator<VoxelShape> {
                         continue;
                     }
 
-                    consumer.accept(voxelshape.a((double) i, (double) j, (double) k));
-                    return true;
+                   return voxelshape.a((double) i, (double) j, (double) k);
                 }
 
                 VoxelShape voxelshape1 = voxelshape.a((double) i, (double) j, (double) k);
@@ -105,13 +117,23 @@ public class VoxelShapeSpliterator extends AbstractSpliterator<VoxelShape> {
                     continue;
                 }
 
-                consumer.accept(voxelshape1);
-                return true;
+                return voxelshape1;
             }
 
-            return false;
+            return null;
         }
     }
+    // Paper end
+
+    boolean a(Consumer<? super VoxelShape> consumer) {
+        // Paper start - moved contents into separate method
+        VoxelShape next = getNextShape();
+        if(next != null) {
+            consumer.accept(next);
+        }
+        return next != null;
+        // Paper end
+    }
 
     @Nullable
     private IBlockAccess a(int i, int j) {
@@ -121,21 +143,30 @@ public class VoxelShapeSpliterator extends AbstractSpliterator<VoxelShape> {
         return this.g.c(k, l);
     }
 
-    boolean b(Consumer<? super VoxelShape> consumer) {
-        Objects.requireNonNull(this.a);
+    // Paper start
+    public VoxelShape getWorldBorderShape() {
         this.h = false;
         WorldBorder worldborder = this.g.getWorldBorder();
         AxisAlignedBB axisalignedbb = this.a.getBoundingBox();
 
         if (!a(worldborder, axisalignedbb)) {
-            // Paper start
             if (worldborder.isInBounds(axisalignedbb.shrink(1.0E-7D)) && !worldborder.isInBounds(axisalignedbb.grow(1.0E-7D))) {
-                consumer.accept(worldborder.asVoxelShape());
-            // Paper end
-                return true;
+               return worldborder.asVoxelShape();
             }
         }
+        return null;
+    }
+    // Paper end
 
+    boolean b(Consumer<? super VoxelShape> consumer) {
+        Objects.requireNonNull(this.a);
+        // Paper start - moved contents to separate method
+        VoxelShape shape = getWorldBorderShape();
+        if(shape != null) {
+            consumer.accept(shape);
+            return true;
+        }
+        // Paper end
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index ffea9dca95e530b0533b220e9bf37c51b86de948..9ae6f8499d4a67d2e016f4a9bdfb784b345834ef 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1105,6 +1105,35 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         return list;
     }
 
+    // Paper start
+    @Override
+    public boolean allEntityCollisionShapesEmpty(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) {
+        int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
+        int j = MathHelper.floor((axisalignedbb.maxX + 2.0D) / 16.0D);
+        int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
+        int l = MathHelper.floor((axisalignedbb.maxZ + 2.0D) / 16.0D);
+        //IChunkProvider ichunkprovider = this.getChunkProvider(); // Paper - unused variable
+        // Paper start
+        int fromY = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
+        int toY = MathHelper.floor((axisalignedbb.maxY + 2.0D) / 16.0D);
+        fromY = MathHelper.clamp(fromY, 0, 15);
+        toY = MathHelper.clamp(toY, 0, 15);
+        // Paper end
+        for (int i1 = i; i1 <= j; ++i1) {
+            for (int j1 = k; j1 <= l; ++j1) {
+                Chunk chunk = (Chunk)this.getChunkIfLoadedImmediately(i1, j1); // Paper
+                if (chunk != null) {
+                    if(!chunk.allEntityCollisionShapesEmpty(entity, axisalignedbb, predicate, fromY, toY)) {
+                        return false;
+                    }
+                }
+            }
+        }
+        return true;
+    }
+
+    // Paper end
+
     public <T extends Entity> List<T> a(@Nullable EntityTypes<T> entitytypes, AxisAlignedBB axisalignedbb, Predicate<? super T> predicate) {
         this.getMethodProfiler().c("getEntities");
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
diff --git a/src/test/java/com/destroystokyo/paper/util/misc/VoxelShapeAccumulatorTest.java b/src/test/java/com/destroystokyo/paper/util/misc/VoxelShapeAccumulatorTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..d200de0e6386d0c3baef1db830e0a996d41d9cfd
--- /dev/null
+++ b/src/test/java/com/destroystokyo/paper/util/misc/VoxelShapeAccumulatorTest.java
@@ -0,0 +1,50 @@
+package com.destroystokyo.paper.util.misc;
+
+import junit.framework.TestCase;
+import net.minecraft.server.AxisAlignedBB;
+import net.minecraft.server.VoxelShape;
+import net.minecraft.server.VoxelShapes;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.List;
+
+/**
+ * @author Lukas Alt
+ * @since 11.01.2021
+ */
+public class VoxelShapeAccumulatorTest extends TestCase {
+
+    @Test
+    public void testAccessPatterns() {
+        List<VoxelShape> shape = Arrays.asList(
+            VoxelShapes.of(new AxisAlignedBB(0,0,0, 1,1,1)),
+            VoxelShapes.of(new AxisAlignedBB(0,0,0, 1,2,1)),
+            VoxelShapes.of(new AxisAlignedBB(0,0,0, 1,3,1)),
+            VoxelShapes.of(new AxisAlignedBB(0,0,0, 1,4,1)),
+            VoxelShapes.of(new AxisAlignedBB(0,0,0, 1,5,1))
+        );
+
+        VoxelShapeAccumulator accumulator = new VoxelShapeAccumulator(new VoxelShapeAccumulator.VoxelAdvancer() {
+            int s = 0;
+            @Override
+            public VoxelShape tryAdvance() {
+                if(s >= shape.size()) {
+                    return null;
+                }
+                VoxelShape x = shape.get(s);
+                s++;
+                return x;
+            }
+        });
+
+        for (VoxelShape voxelShape : accumulator) {
+            System.out.println(voxelShape);
+        }
+        System.out.println(" --- ");
+        for (VoxelShape voxelShape : accumulator) {
+            System.out.println(voxelShape);
+        }
+    }
+
+}
