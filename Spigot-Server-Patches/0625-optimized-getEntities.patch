From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lukas81298 <lukas81298@gmail.com>
Date: Tue, 29 Dec 2020 23:16:47 +0100
Subject: [PATCH] optimized getEntities


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index dcbae1c4512cf267719934785ea60de8ae66052d..0c9cf5ae2e790e6f14fe99cab3db177cbb1b327c 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -878,7 +878,10 @@ public class Chunk implements IChunkAccess {
 
         i = MathHelper.clamp(i, 0, this.entitySlices.length - 1);
         j = MathHelper.clamp(j, 0, this.entitySlices.length - 1);
+        addEntitiesToList(entity, axisalignedbb, list, predicate, i, j);
+    }
 
+    public void addEntitiesToList(@Nullable Entity entity, AxisAlignedBB axisalignedbb, List<Entity> list, @Nullable Predicate<? super Entity> predicate, int i, int j) { // Paper - take i, j as optional arguments
         for (int k = i; k <= j; ++k) {
             List<Entity> entityslice = this.entitySlices[k]; // Spigot
             List<Entity> list1 = entityslice; // Spigot
@@ -888,7 +891,7 @@ public class Chunk implements IChunkAccess {
                 Entity entity1 = (Entity) list1.get(i1);
                 if (entity1.shouldBeRemoved) continue; // Paper
 
-                if (entity1.getBoundingBox().c(axisalignedbb) && entity1 != entity) {
+                if (entity1 != entity && entity1.getBoundingBox().intersects(axisalignedbb)) { // Paper - swap order and use obfuscation helper
                     if (predicate == null || predicate.test(entity1)) {
                         list.add(entity1);
                     }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 02df0925f8c22917f71e75b14a117f267bf96f6c..ac60037b0ee8207b36f6082c520b737d88b9bba0 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1954,10 +1954,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return EnumInteractionResult.PASS;
     }
 
+    public final boolean canCollideWithEntity(Entity entity) { return j(entity); } // Paper - OBFHELPER (this is not the same as canCollideWith(Entity), which is the original name of this method)
     public boolean j(Entity entity) {
         return entity.aZ() && !this.isSameVehicle(entity);
     }
 
+    public final boolean canBeCollidedWith() { return aZ(); } // Paper - OBFHELPER
     public boolean aZ() {
         return false;
     }
diff --git a/src/main/java/net/minecraft/server/ICollisionAccess.java b/src/main/java/net/minecraft/server/ICollisionAccess.java
index 25e54a1fadc5d31fb250a3f47524b4f345fc8cc6..496ebb7453ae4736ac43d319530e2d00b3840fb9 100644
--- a/src/main/java/net/minecraft/server/ICollisionAccess.java
+++ b/src/main/java/net/minecraft/server/ICollisionAccess.java
@@ -27,6 +27,7 @@ public interface ICollisionAccess extends IBlockAccess {
         return this.a(entity, VoxelShapes.a(entity.getBoundingBox()));
     }
 
+    default boolean noCollision(AxisAlignedBB bb) { return b(bb); } // Paper - OBFHELPER
     default boolean b(AxisAlignedBB axisalignedbb) {
         return this.b((Entity) null, axisalignedbb, (entity) -> {
             return true;
@@ -51,12 +52,16 @@ public interface ICollisionAccess extends IBlockAccess {
         } finally { if (entity != null) entity.collisionLoadChunks = false; } // Paper
     }
 
+
+    default Stream<VoxelShape> getEntityCollisions(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) { return d(entity, axisalignedbb, predicate); };
     Stream<VoxelShape> c(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate);
 
+    default Stream<VoxelShape> getCollisions(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) { return d(entity, axisalignedbb, predicate); } // Paper - OBFHELPER
     default Stream<VoxelShape> d(@Nullable Entity entity, AxisAlignedBB axisalignedbb, Predicate<Entity> predicate) {
         return Stream.concat(this.b(entity, axisalignedbb), this.c(entity, axisalignedbb, predicate));
     }
 
+    default Stream<VoxelShape> getBlockCollisions(@Nullable Entity entity, AxisAlignedBB axisalignedbb) { return b(entity, axisalignedbb); } // Paper - OBFHELPER
     default Stream<VoxelShape> b(@Nullable Entity entity, AxisAlignedBB axisalignedbb) {
         return StreamSupport.stream(new VoxelShapeSpliterator(this, entity, axisalignedbb), false);
     }
diff --git a/src/main/java/net/minecraft/server/IEntityAccess.java b/src/main/java/net/minecraft/server/IEntityAccess.java
index 2639c17b7f6100533f33124f9e49990cd303d161..670e70b7736f419e18db26cf87131a1a76a2a0a7 100644
--- a/src/main/java/net/minecraft/server/IEntityAccess.java
+++ b/src/main/java/net/minecraft/server/IEntityAccess.java
@@ -62,6 +62,8 @@ public interface IEntityAccess {
             AxisAlignedBB axisalignedbb1 = axisalignedbb.g(1.0E-7D);
 
             return this.getEntities(entity, axisalignedbb1, predicate.and((entity1) -> {
+                // Paper start - bounding box intersection check is redundant - it is already ensured by getEntities(). Furthermore replaced the code with a simplified version
+                /*
                 boolean flag;
 
                 if (entity1.getBoundingBox().c(axisalignedbb1)) {
@@ -82,6 +84,13 @@ public interface IEntityAccess {
 
                 flag = false;
                 return flag;
+                */
+                if (entity == null) {
+                    return entity1.canBeCollidedWith();
+                } else {
+                    return entity.canCollideWithEntity(entity1);
+                }
+                // Paper end
             })).stream().map(Entity::getBoundingBox).map(VoxelShapes::a);
         }
     }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 8e4f646625b0a7904ccc4f1c091ba3c6458e3aad..c211d964978db23afd4c44c9de48ea1e364b3e60 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1085,18 +1085,21 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         int j = MathHelper.floor((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
         int l = MathHelper.floor((axisalignedbb.maxZ + 2.0D) / 16.0D);
-        IChunkProvider ichunkprovider = this.getChunkProvider();
-
+        //IChunkProvider ichunkprovider = this.getChunkProvider(); // Paper - unused variable
+        // Paper start
+        int fromY = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
+        int toY = MathHelper.floor((axisalignedbb.maxY + 2.0D) / 16.0D);
+        fromY = MathHelper.clamp(fromY, 0, 15);
+        toY = MathHelper.clamp(toY, 0, 15);
+        // Paper end
         for (int i1 = i; i1 <= j; ++i1) {
             for (int j1 = k; j1 <= l; ++j1) {
                 Chunk chunk = (Chunk)this.getChunkIfLoadedImmediately(i1, j1); // Paper
-
                 if (chunk != null) {
-                    chunk.a(entity, axisalignedbb, list, predicate);
+                    chunk.addEntitiesToList(entity, axisalignedbb, list, predicate, fromY, toY); // Paper - use own method which takes y indices as well
                 }
             }
         }
-
         return list;
     }
 
